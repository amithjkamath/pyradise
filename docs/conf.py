# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html
import os
import shutil
import sys
import pyradise.__version__ as info

basedir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, basedir)

# -- Copy example Jupyter notebooks for documentation building
shutil.copyfile(os.path.join(basedir, 'examples', 'conversion', 'dicom_to_nii.ipynb'),
                os.path.join(basedir, 'docs', 'examples.conversion.dicom_to_nii.ipynb'))

shutil.copyfile(os.path.join(basedir, 'examples', 'conversion', 'nii_to_dicom.ipynb'),
                os.path.join(basedir, 'docs', 'examples.conversion.nii_to_dicom.ipynb'))

shutil.copyfile(os.path.join(basedir, 'examples', 'inference', 'basic.ipynb'),
                os.path.join(basedir, 'docs', 'examples.inference.basic.ipynb'))

shutil.copyfile(os.path.join(basedir, 'examples', 'inference', 'container.ipynb'),
                os.path.join(basedir, 'docs', 'examples.inference.container.ipynb'))

shutil.copyfile(os.path.join(basedir, 'examples', 'processing', 'basic_processing.ipynb'),
                os.path.join(basedir, 'docs', 'examples.processing.basic_processing.ipynb'))

# Generate a temporary directory
_temporary_directory = './_temp'
if not os.path.exists(_temporary_directory):
    os.makedirs(_temporary_directory)

# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

project = 'PyRaDiSe'
copyright = info.__copyright__
author = info.__author__
version = info.__version__
release = info.__version__


# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

extensions = ['sphinx.ext.autodoc',
              'sphinx.ext.autosummary',
              'sphinx.ext.coverage',
              'sphinx.ext.githubpages',
              'sphinx.ext.imgmath',
              'sphinx.ext.todo',
              'sphinx.ext.napoleon',
              'sphinx.ext.intersphinx',
              'sphinx.ext.viewcode',
              'nbsphinx',
              'sphinx_copybutton',
              'sphinx_toolbox.more_autodoc.autonamedtuple',
              'sphinx_autodoc_typehints']

# The suffix(es) of source filenames.
source_suffix = {'.rst': 'restructuredtext'}

# The master document.
master_doc = 'index'

# The root toctree document (containing the root toctree).
root_doc = 'index'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The primary domain.
primary_domain = 'py'

# Keep warnings
keep_warnings = False

# Suppress warnings
suppress_warnings = []

# Needs Sphinx version
needs_sphinx = '5.1'

# Enable figure numbering
numfig = True

# The figure numbering depth
numfig_secnum_depth = 0


# -- Options for internationalization ----------------------------------------
# The language for content autogenerated by Sphinx
language = 'en'


# -- Options for math  -------------------------------------------------------
# Math equations numbering
math_numfig = True


# -- Options for HTML output -------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

# The HTML theme
html_theme = 'pydata_sphinx_theme'

# The HTML logo
html_logo = None

# The static path for HTML output
html_static_path = ['_static']

# Theme options
html_theme_options = {"collapse_navigation": True,
                      "show_toc_level": 2,
                      "page_sidebar_items": ["page-toc",]
                      }


# -- Options for autodoc -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html

# The order of the members in the documentation
autodoc_member_order = 'bysource'

# Mock imports
autodoc_mock_imports = ['SimpleITK', 'ITK', 'pydicom', 'opencv']

# Indicates if the module names should be included in the documentation
add_module_names = False


# -- Options for napoleon extension ------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html

# Use the :ivar: role for instance variables
napoleon_use_ivar = True

# Use the Google docstring style
napoleon_google_docstring = True

# Use the admonition for examples
napoleon_use_admonition_for_examples = True

# Use the admonition for notes
napoleon_use_admonition_for_notes = True

# Use the admonition for references
napoleon_use_admonition_for_references = True


# -- Options for nbsphinx ----------------------------------------------------
# https://nbsphinx.readthedocs.io/en/0.8.9/usage.html#Sphinx-Configuration-Values

# Do not block the building process if error occurs during building
nbsphinx_allow_errors = True

# Do not execute notebooks
nbsphinx_execute = 'never'


# -- Options for intersphinx extension ---------------------------------------
# https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html

# External library mapping
intersphinx_mapping = {'itk': ('https://itk.org/Doxygen/html/',
                               os.path.join(_temporary_directory, 'itk.inv')),
                       'SimpleITK': ('https://simpleitk.org/doxygen/latest/html/',
                                     os.path.join(_temporary_directory, 'sitk.inv')),
                       'pydicom': ('https://pydicom.github.io/pydicom/stable/',
                                   None)}


# -- Generating the inventory files for the external libraries ---------------

# Utility function for inventory generation
def create_inventory_header(project_: str, version_: str) -> str:
    return f'# Sphinx inventory version 2\n' \
           f'# Project: {str(project_)}\n' \
           f'# Version: {str(version_)}\n' \
           '# The remainder of this file is compressed using zlib.\n'


# create the SimpleITK inventory file
def create_sitk_inventory(output_dir: str) -> None:
    import SimpleITK as sitk
    from zlib import compress

    # Create the file header
    header = create_inventory_header(sitk.__name__, sitk.__version__)

    # Create the inventory objects
    objects = 'SimpleITK.Image py:class 0 classitk_1_1simple_1_1Image.html -\n' \
              'SimpleITK.Transform py:class 0 classitk_1_1simple_1_1Transform.html -\n'

    # Compress the inventory objects
    compressed_objects = compress(objects.encode('utf-8'), 9)

    # Write the inventory file
    with open(os.path.join(output_dir, 'sitk.inv'), 'wb') as f:
        f.write(bytes(header, 'utf-8') + compressed_objects)


# create the ITK inventory file
def create_itk_inventory(output_dir: str) -> None:
    import itk
    from zlib import compress

    # Create the file header
    header = create_inventory_header(itk.__name__, itk.__version__)

    # Create the inventory objects
    objects = 'itk.Image py:class 0 classitk_1_1Image.html -\n'

    # Compress the inventory objects
    compressed_objects = compress(objects.encode('utf-8'), 9)

    # Write the inventory file
    with open(os.path.join(output_dir, 'itk.inv'), 'wb') as f:
        f.write(bytes(header, 'utf-8') + compressed_objects)


# create the inventory files in the temporary directory
create_sitk_inventory(_temporary_directory)
create_itk_inventory(_temporary_directory)
